<?php
/**
 * @file
 * Install, update and uninstall functions for the University of Adelaide installation profile.
 */

use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function ua_site_manager_install() {
  // Set front page to "node".
  \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/websites')->save(TRUE);

  // Allow visitor account creation with administrative approval.
  $user_settings = \Drupal::configFactory()->getEditable('user.settings');
  $user_settings->set('register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)->save(TRUE);

  // Revoke default permissions for system roles.
  user_role_revoke_permissions(RoleInterface::ANONYMOUS_ID, ['access content', 'restful get entity:node']);
  user_role_revoke_permissions(RoleInterface::AUTHENTICATED_ID, ['access content']);

  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // Enable the Contact link in the footer menu.
  /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
  $menu_link_manager->updateDefinition('contact.site_page', array('enabled' => TRUE));

  // TODO: Remove this. Temporarily provides anon access to nodes via REST.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, array('restful get entity:node'));

  // Allow authenticated users to use shortcuts.
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, array('access shortcuts'));

  // Populate the default shortcut set.
  $shortcut = entity_create('shortcut', array(
    'shortcut_set' => 'default',
    'title' => t('Add content'),
    'weight' => -20,
    'link' => array('uri' => 'internal:/node/add'),
  ));
  $shortcut->save();

  $shortcut = entity_create('shortcut', array(
    'shortcut_set' => 'default',
    'title' => t('All content'),
    'weight' => -19,
    'link' => array('uri' => 'internal:/admin/content'),
  ));
  $shortcut->save();

  // Enable the admin theme.
  \Drupal::configFactory()->getEditable('node.settings')->set('use_admin_theme', TRUE)->save(TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Add the hash salt field to the environment entity.
 */
function ua_site_manager_update_8001(&$sandbox) {
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_hash_salt',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_environment',
    'field_name' => 'field_ua_sm_hash_salt',
    'label' => t('Hash salt'),
  ]);
  $field->save();

  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.ua_sm_environment.default');
  $entity_form_display->removeComponent('field_ua_sm_hash_salt')
    ->save();

  $entity_view_display = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('node.ua_sm_environment.default');
  $entity_view_display->removeComponent('field_ua_sm_hash_salt')
    ->save();
}

/**
 * Implements hook_update_N().
 *
 * Add the new authoriser and maintainer fields, remove old authorizer fields.
 * Set the form and view weights.
 */
function ua_site_manager_update_8002(&$sandbox) {
  // Remove authorizer email and ID.
  $field = FieldConfig::load('node.ua_sm_site.field_ua_sm_authorizer_email');
  $field->delete();
  $field = FieldConfig::load('node.ua_sm_site.field_ua_sm_authorizer_id');
  $field->delete();

  // Authoriser email.
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_authoriser_email',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_site',
    'description' => 'E.g. feedback@adelaide.edu.au.',
    'field_name' => 'field_ua_sm_authoriser_email',
    'label' => t('Authoriser email'),
  ]);
  $field->save();

  // Authoriser name.
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_authoriser_name',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_site',
    'description' => 'E.g. Director, Marketing and Communications.',
    'field_name' => 'field_ua_sm_authoriser_name',
    'label' => t('Authoriser name'),
  ]);
  $field->save();

  // Maintainer email.
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_maintainer_email',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_site',
    'description' => 'E.g. feedback@adelaide.edu.au.',
    'field_name' => 'field_ua_sm_maintainer_email',
    'label' => t('Maintainer email'),
  ]);
  $field->save();

  // Maintainer name.
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_maintainer_name',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_site',
    'description' => 'E.g. Director, Marketing and Communications.',
    'field_name' => 'field_ua_sm_maintainer_name',
    'label' => t('Maintainer name'),
  ]);
  $field->save();

  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.ua_sm_site.default');
  $entity_form_display->setComponent('field_ua_sm_authoriser_name', ['weight' => 7])
    ->save();
  $entity_form_display->setComponent('field_ua_sm_authoriser_email', ['weight' => 8])
    ->save();
  $entity_form_display->setComponent('field_ua_sm_maintainer_name', ['weight' => 8])
    ->save();
  $entity_form_display->setComponent('field_ua_sm_maintainer_email', ['weight' => 8])
    ->save();
}

/**
 * Implements hook_update_N().
 *
 * Add the ssh user field to the server entity.
 */
function ua_site_manager_update_8003(&$sandbox) {
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_ssh_user',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_server',
    'field_name' => 'field_ua_sm_ssh_user',
    'label' => t('SSH user'),
  ]);
  $field->save();

  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.ua_sm_server.default');

  $entity_form_display->setComponent('field_ua_sm_ssh_user', ['weight' => 1])
    ->save();

  $entity_view_display = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('node.ua_sm_server.default');

  $entity_view_display->setComponent('field_ua_sm_ssh_user', ['weight' => 2])
    ->save();
}
