<?php
/**
 * @file
 * Install, update and uninstall functions for the University of Adelaide installation profile.
 */

use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function ua_site_manager_install() {
  // Set front page to "node".
  \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/home')->save(TRUE);

  // Allow visitor account creation with administrative approval.
  $user_settings = \Drupal::configFactory()->getEditable('user.settings');
  $user_settings->set('register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)->save(TRUE);

  // Revoke default permissions for system roles.
  user_role_revoke_permissions(RoleInterface::ANONYMOUS_ID, ['access content', 'restful get entity:node']);
  user_role_revoke_permissions(RoleInterface::AUTHENTICATED_ID, ['access content']);

  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // Enable the Contact link in the footer menu.
  /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
  $menu_link_manager->updateDefinition('contact.site_page', array('enabled' => TRUE));

  // TODO: Remove this. Temporarily provides anon access to nodes via REST.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, array('restful get entity:node'));

  // Allow authenticated users to use shortcuts.
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, array('access shortcuts'));

  // Populate the default shortcut set.
  $shortcut = entity_create('shortcut', array(
    'shortcut_set' => 'default',
    'title' => t('Add content'),
    'weight' => -20,
    'link' => array('uri' => 'internal:/node/add'),
  ));
  $shortcut->save();

  $shortcut = entity_create('shortcut', array(
    'shortcut_set' => 'default',
    'title' => t('All content'),
    'weight' => -19,
    'link' => array('uri' => 'internal:/admin/content'),
  ));
  $shortcut->save();

  // Enable the admin theme.
  \Drupal::configFactory()->getEditable('node.settings')->set('use_admin_theme', TRUE)->save(TRUE);
}

/**
 * Implements hook_update_dependencies().
 */
function ua_site_manager_update_dependencies() {
  $dependencies['ua_site_manager']['8004'] = ['paragraphs' => '8001'];
  return $dependencies;
}

/**
 * Implements hook_update_N().
 *
 * Add the hash salt field to the environment entity.
 */
function ua_site_manager_update_8001(&$sandbox) {
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_hash_salt',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_environment',
    'field_name' => 'field_ua_sm_hash_salt',
    'label' => t('Hash salt'),
  ]);
  $field->save();

  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.ua_sm_environment.default');
  $entity_form_display->removeComponent('field_ua_sm_hash_salt')
    ->save();

  $entity_view_display = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('node.ua_sm_environment.default');
  $entity_view_display->removeComponent('field_ua_sm_hash_salt')
    ->save();
}

/**
 * Implements hook_update_N().
 *
 * Add the new authoriser and maintainer fields, remove old authorizer fields.
 * Set the form and view weights.
 */
function ua_site_manager_update_8002(&$sandbox) {
  // Remove authorizer email and ID.
  $field = FieldConfig::load('node.ua_sm_site.field_ua_sm_authorizer_email');
  $field->delete();
  $field = FieldConfig::load('node.ua_sm_site.field_ua_sm_authorizer_id');
  $field->delete();

  // Authoriser email.
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_authoriser_email',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_site',
    'description' => 'E.g. feedback@adelaide.edu.au.',
    'field_name' => 'field_ua_sm_authoriser_email',
    'label' => t('Authoriser email'),
  ]);
  $field->save();

  // Authoriser name.
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_authoriser_name',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_site',
    'description' => 'E.g. Director, Marketing and Communications.',
    'field_name' => 'field_ua_sm_authoriser_name',
    'label' => t('Authoriser name'),
  ]);
  $field->save();

  // Maintainer email.
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_maintainer_email',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_site',
    'description' => 'E.g. feedback@adelaide.edu.au.',
    'field_name' => 'field_ua_sm_maintainer_email',
    'label' => t('Maintainer email'),
  ]);
  $field->save();

  // Maintainer name.
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_maintainer_name',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_site',
    'description' => 'E.g. Director, Marketing and Communications.',
    'field_name' => 'field_ua_sm_maintainer_name',
    'label' => t('Maintainer name'),
  ]);
  $field->save();

  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.ua_sm_site.default');
  $entity_form_display->setComponent('field_ua_sm_authoriser_name', ['weight' => 7])
    ->save();
  $entity_form_display->setComponent('field_ua_sm_authoriser_email', ['weight' => 8])
    ->save();
  $entity_form_display->setComponent('field_ua_sm_maintainer_name', ['weight' => 8])
    ->save();
  $entity_form_display->setComponent('field_ua_sm_maintainer_email', ['weight' => 8])
    ->save();
}

/**
 * Implements hook_update_N().
 *
 * Add the ssh user field to the server entity.
 */
function ua_site_manager_update_8003(&$sandbox) {
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_ssh_user',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_server',
    'field_name' => 'field_ua_sm_ssh_user',
    'label' => t('SSH user'),
  ]);
  $field->save();

  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.ua_sm_server.default');

  $entity_form_display->setComponent('field_ua_sm_ssh_user', ['weight' => 1])
    ->save();

  $entity_view_display = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('node.ua_sm_server.default');

  $entity_view_display->setComponent('field_ua_sm_ssh_user', ['weight' => 2])
    ->save();
}

/**
 * Replace user ID field from user paragraph with user entity reference.
 *
 * Add Preferred Name field to User entity.
 *
 * Add new view configuration.
 */
function ua_site_manager_update_8004(&$sandbox) {
  // Add 'user' entity reference field to user role paragraph.
  // @see app/profiles/ua_site_manager/config/install/field.storage.paragraph.field_ua_sm_user.yml
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'paragraph',
    'type' => 'entity_reference',
    'field_name' => 'field_ua_sm_user',
    'cardinality' => 1,
    'settings' => [
      'target_type' => 'user',
    ],
  ]);
  $field_storage->save();

  // @see app/profiles/ua_site_manager/config/install/field.field.paragraph.ua_sm_user_role.field_ua_sm_user.yml
  $field = FieldConfig::create([
    'entity_type' => 'paragraph',
    'bundle' => 'ua_sm_user_role',
    'field_name' => 'field_ua_sm_user',
    'label' => t('User'),
  ]);
  $field->save();

  // Create 'string' field_ua_user_preferred_name.
  // @see app/profiles/ua_site_manager/config/install/field.field.user.field_ua_user_preferred_name.yml
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'user',
    'type' => 'string',
    'field_name' => 'field_ua_user_preferred_name',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  // Add preferred name field to User entity.
  // @see app/profiles/ua_site_manager/config/install/field.field.user.field_ua_user_preferred_name.yml
  $field = FieldConfig::create([
    'entity_type' => 'user',
    'bundle' => 'user',
    'field_name' => 'field_ua_user_preferred_name',
    'label' => t('Preferred name'),
  ]);
  $field->save();

  // @see app/profiles/ua_site_manager/config/install/core.entity_form_display.paragraph.ua_sm_user_role.default.yml
  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('paragraph.ua_sm_user_role.default');
  $entity_form_display->setComponent('field_ua_sm_user', ['weight' => 0])
    ->save();

  // @see app/profiles/ua_site_manager/config/install/core.entity_view_display.paragraph.ua_sm_user_role.default.yml
  $entity_view_display = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('paragraph.ua_sm_user_role.default');
  $entity_view_display->setComponent('field_ua_sm_user', ['weight' => 0])
    ->save();

  // Disable LDAP integration if it's enabled.
  $config = \Drupal::service('config.factory')->getEditable('ua_sm_custom.settings');
  $ldap_integration = $config->get('ldap.enabled');
  $config->set('ldap.enabled', FALSE);
  $config->save();

  $query = \Drupal::entityQuery('node')
    ->condition('type', 'ua_sm_site')
    ->execute();

  $sites = \Drupal::entityTypeManager()->getStorage('node')
    ->loadMultiple($query);

  foreach ($sites as $site) {
    // @todo get the paragraph referenced entities.
    $user_roles = $site->field_ua_sm_users->referencedEntities();
    foreach ($user_roles as $user_role) {
      $account = user_load_by_name($user_role->field_ua_sm_user_id->value);
      if (!$account) {
        $account = \Drupal::service('ua_sm_custom.user')
          ->provision($user_role->field_ua_sm_user_id->value);
      }

      $user_role->field_ua_sm_user->target_id = $account->id();
      $user_role->save();
    }

    $site->save();
  }

  // Set LDAP integration back to whatever it was before.
  $config->set('ldap.enabled', $ldap_integration);
  $config->save();

  // Load in the views needed.
  $config_path = drupal_get_path('profile', 'ua_site_manager') . '/config/install';
  $active_storage = \Drupal::service('config.storage');
  $source = new Drupal\Core\Config\FileStorage($config_path);

  // This configuration may or may not exist on prd.
  if ($active_storage->exists('views.view_ua_sm_site_instances')) {
    // Delete the old configuration.
    $active_storage->delete('views.view_ua_sm_site_instances');
  }

  // Set front page to new path /websites.
  \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/websites')->save(TRUE);

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage->write('views.view.users', $source->read('views.view.users'));
  $active_storage->write('views.view.ua_sm_sites', $source->read('views.view.ua_sm_sites'));
  $active_storage->write('views.view.ua_sm_site_users', $source->read('views.view.ua_sm_site_users'));
  $active_storage->write('views.view.ua_sm_site_instances', $source->read('views.view.ua_sm_site_instances'));
  $active_storage->write('views.view.ua_sm_site_details', $source->read('views.view.ua_sm_site_details'));
  $active_storage->write('views.view.ua_sm_servers', $source->read('views.view.ua_sm_servers'));
  $active_storage->write('views.view.ua_sm_platforms', $source->read('views.view.ua_sm_platforms'));
  $active_storage->write('views.view.ua_sm_environments', $source->read('views.view.ua_sm_environments'));
  $active_storage->write('views.view.ua_sm_distributions', $source->read('views.view.ua_sm_distributions'));

  // Delete user_id field from user role paragraph.
  $field = FieldConfig::load('paragraph.ua_sm_user_role.field_ua_sm_user_id');
  $field->delete();

}

/**
 * Implements hook_update_N().
 *
 * Add permissions to views.
 */
function ua_site_manager_update_8005(&$sandbox) {
  $config_path = drupal_get_path('profile', 'ua_site_manager') . '/config/install';
  $source = new Drupal\Core\Config\FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  $configs = [
    'user.role.uasm_developer',
    'user.role.uasm_online_consultant',
    'user.role.uasm_site_administrator',
    'views.view.users',
    'views.view.ua_sm_sites',
    'views.view.ua_sm_site_users',
    'views.view.ua_sm_site_instances',
    'views.view.ua_sm_site_details',
    'views.view.ua_sm_servers',
    'views.view.ua_sm_platforms',
    'views.view.ua_sm_environments',
    'views.view.ua_sm_distributions',
  ];

  foreach ($configs as $config) {
    // Delete config if it already exists.
    if ($config_storage->exists($config)) {
      $config_storage->delete($config);
    }
    $config_storage->write($config, $source->read($config));
  }
}

/**
 * Implements hook_update_N().
 *
 * Update route to site add.
 */
function ua_site_manager_update_8006(&$sandbox) {
  $config_path = drupal_get_path('profile', 'ua_site_manager') . '/config/install';
  $source = new Drupal\Core\Config\FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config = 'views.view.ua_sm_sites';
  $config_storage->delete($config);
  $config_storage->write($config, $source->read($config));
}

/**
 * Implements hook_update_N().
 *
 * Add the config sync field to the environment entity.
 */
function ua_site_manager_update_8007(&$sandbox) {
  $field_storage = FieldStorageConfig::create([
    'entity_type' => 'node',
    'type' => 'string',
    'field_name' => 'field_ua_sm_config_sync',
    'cardinality' => 1,
  ]);
  $field_storage->save();

  $field = FieldConfig::create([
    'entity_type' => 'node',
    'bundle' => 'ua_sm_environment',
    'field_name' => 'field_ua_sm_config_sync',
    'label' => t('Config sync dir'),
  ]);
  $field->save();

  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.ua_sm_environment.default');
  $entity_form_display->removeComponent('field_ua_sm_config_sync')
    ->save();

  $entity_view_display = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('node.ua_sm_environment.default');
  $entity_view_display->removeComponent('field_ua_sm_config_sync')
    ->save();
}

/**
 * Implements hook_update_N().
 *
 * Update the site users view with a custom view field for operations.
 * Update homepage and login blocks.
 */
function ua_site_manager_update_8008(&$sandbox) {
  \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/home')->save(TRUE);
  $config_storage = \Drupal::service('config.storage');

  // Remove blocks.
  $config_storage->delete('block.block.bartik_account_menu');
  $config_storage->delete('block.block.bartik_login');
  $config_storage->delete('block.block.seven_login');

  // Add back in account menu block with modified access.
  $config_path = drupal_get_path('profile', 'ua_site_manager') . '/config/install';
  $source = new Drupal\Core\Config\FileStorage($config_path);
  $config_storage->write('block.block.bartik_account_menu', $source->read('block.block.bartik_account_menu'));

  if ($config_storage->exists('views.view.ua_sm_site_users')) {
    $config_storage->delete('views.view.ua_sm_site_users');
  }
  $config_storage->write('views.view.ua_sm_site_users', $source->read('views.view.ua_sm_site_users'));
}
