<?php

/**
 * @file
 * Contains ua_sm_custom.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\ua_ldap\SiteRoleSlug;
use Drupal\comment\CommentInterface;
use GuzzleHttp\Client;

/**
 * Implements hook_help().
 */
function ua_sm_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ua_sm_custom module.
    case 'help.page.ua_sm_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides functionality specific to the UA Site Manager.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Populates the site id with a guaranteed unique ID.
 */
function ua_sm_custom_node_presave(Drupal\node\Entity\Node $entity) {
  if ($entity->bundle() != 'ua_sm_site') {
    return;
  }

  // Generate site slug based on domain and path.
  $site_slug = SiteRoleSlug::getSite(
    $entity->field_ua_sm_domain_name->value,
    $entity->field_ua_sm_path->value
  );

  // Initialise site id to base site slug.
  $site_id = $site_slug;

  // Prepare a query to check if site id already exists.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'ua_sm_site')
    ->condition('field_ua_sm_site_id', $site_id);
  $entity_ids = $query->execute();

  $count = 0;
  while (count($entity_ids) > 0) {
    $count++;
    $site_id = $site_slug . $count;
    // Check for updated site id.
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'ua_sm_site')
      ->condition('field_ua_sm_site_id', $site_id);
    $entity_ids = $query->execute();
  }

  $entity->field_ua_sm_site_id->value = $site_id;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ua_sm_custom_node_insert(EntityInterface $entity) {
  $bundles = ['ua_sm_site', 'ua_sm_site_instance'];

  if (!in_array($entity->bundle(), $bundles)) {
    return;
  }

  $jenkins_config = \Drupal::config('ua_sm_custom.settings')->get('jenkins');
  $ldap_config = \Drupal::config('ua_sm_custom.settings')->get('ldap');

  if ($entity->bundle() == 'ua_sm_site' && $ldap_config['enabled']) {
    \Drupal::service('ua_ldap.ldap_site')
      ->addSite($entity->field_ua_sm_site_id->value);
    // todo: deal with failure - consider a queue.
    \Drupal::service('ua_ldap.ldap_site')
      ->syncUsers($entity->field_ua_sm_site_id->value);
    // todo: deal with failure - consider a queue.
  }
  elseif ($entity->bundle() == 'ua_sm_site_instance' && $jenkins_config['enabled']) {
    $jenkins_url = $jenkins_config['path'];
    $jenkins_token = $jenkins_config['token'];
    $jenkins_job = $jenkins_config['job'];
    $id = $entity->id();
    $uuid = $entity->uuid();
    $environment = reset($entity->field_ua_sm_environment->referencedEntities());
    $site_nid = $environment->field_ua_sm_site->getString();

    $comment = \Drupal::entityManager()
      ->getStorage('comment')
      ->create([
        'subject' => 'Deploying ' . $entity->title->value . '.',
        'comment_body' => 'Test',
        'entity_id' => $site_nid,
        'entity_type' => 'node',
        'field_name' => 'field_ua_sm_instance_log',
        'status' => CommentInterface::PUBLISHED,
      ]);

    $client = new Client([
      'base_uri' => $jenkins_url
    ]);

    $request_query = [];

    if (isset($jenkins_job) && !empty($jenkins_job)) {
      // Must be first part of query.
      $request_query['job'] = $jenkins_job;
    }

    if (isset($jenkins_token) && !empty($jenkins_token)) {
      $request_query['token'] = $jenkins_token;
    }

    $request_query['site_instance_id'] = $id;

    // We need this uuid to make POSTs on comments.
    $request_query['site_instance_uuid'] = $uuid;

    // Looks there are some auth issues with anon read access.
    // buildByToken solves this issue.
    $response = $client->get('buildWithParameters', ['query' => http_build_query($request_query) ]);

    $code = $response->getStatusCode();

    if ($code == (200 || 201)) {
      $comment->set('comment_body', 'Jenkins is building ..');
    }
    else {
      $comment->set('comment_body', 'Jenkins failed to build ' .
        $entity->title->value . ' with the response ' . $response->getBody());
    }

    $comment->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ua_sm_custom_node_update(EntityInterface $entity) {
  if ($entity->bundle() != 'ua_sm_site' ||
    !\Drupal::config('ua_sm_custom.settings')->get('ldap')['enabled']) {
    return;
  }
  \Drupal::service('ua_ldap.ldap_site')->syncUsers($entity->field_ua_sm_site_id->value);
  // todo: deal with failure - consider a queue.
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function ua_sm_custom_node_delete(EntityInterface $entity) {
  if ($entity->bundle() != 'ua_sm_site' ||
    !\Drupal::config('ua_sm_custom.settings')->get('ldap')['enabled']) {
    return;
  }
  \Drupal::service('ua_ldap.ldap_site')->removeSite($entity->field_ua_sm_site_id->value);
  // todo: deal with failure - consider a queue.
}
