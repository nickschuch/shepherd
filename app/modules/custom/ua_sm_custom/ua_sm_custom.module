<?php

/**
 * @file
 * Contains ua_sm_custom.module.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\ua_ldap\SiteRoleSlug;
use Drupal\comment\CommentInterface;

/**
 * Implements hook_help().
 */
function ua_sm_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ua_sm_custom module.
    case 'help.page.ua_sm_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides functionality specific to the UA Site Manager.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ua_sm_custom_node_presave(Node $entity) {
  if ($entity->bundle() == 'ua_sm_site') {
    $entity->field_ua_sm_site_token->value = ua_sm_custom_generate_unique_site_token($entity);
  }
  elseif ($entity->bundle() == 'ua_sm_site_instance') {
    ua_sm_custom_ports($entity);
  }
}

/**
 * Generates a unique token slug by querying existing ones.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The site_instance entity to post the comment to, or it's parent anyway.
 *
 * @return string
 *   A guaranteed unique site token.
 */
function ua_sm_custom_generate_unique_site_token(EntityInterface $entity) {
  // Generate site slug based on domain and path.
  $site_slug = SiteRoleSlug::getSite(
    $entity->field_ua_sm_domain_name->value,
    $entity->field_ua_sm_path->value
  );

  // Initialise site id to base site slug.
  $site_token = $site_slug;

  // Prepare a query to check if site id already exists.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'ua_sm_site')
    ->condition('field_ua_sm_site_token', $site_token);
  $entity_ids = $query->execute();

  $count = 0;
  while (count($entity_ids) > 0) {
    $count++;
    $site_token = $site_slug . $count;
    // Check for updated site id.
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'ua_sm_site')
      ->condition('field_ua_sm_site_token', $site_token);
    $entity_ids = $query->execute();
  }

  return $site_token;
}

/**
 * Triggers the requested Jenkins job, then posts about it on the site entity.
 *
 * @param string $job_name
 *   The name of the Jenkins job to run.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The site_instance entity to post the comment to, or it's parent anyway.
 */
function ua_sm_custom_run_job_and_post_comment($job_name, EntityInterface $entity) {
  $environment = reset($entity->field_ua_sm_environment->referencedEntities());
  $site = reset($environment->field_ua_sm_site->referencedEntities());

  $response = \Drupal::service('ua_sm_custom.jenkins_client')->job($job_name, $entity);

  $comment = \Drupal::entityManager()
    ->getStorage('comment')
    ->create([
      'subject' => 'Running ' . $job_name . ' on ' . $entity->title->value . '.',
      'comment_body' => 'Test',
      'entity_id' => $site->id(),
      'entity_type' => 'node',
      'field_name' => 'field_ua_sm_instance_log',
      'status' => CommentInterface::PUBLISHED,
    ]);

  if ($response->getStatusCode() == (200 || 201)) {
    $comment->set('comment_body', 'Jenkins has started ' . $job_name . '...');
  }
  else {
    $comment->set('comment_body', 'Jenkins failed to start ' . $job_name . ' ' .
      $entity->title->value . ' with the response ' . $response->getBody());
  }

  $comment->save();
}

/**
 * Populates the site instance with unique ports.
 */
function ua_sm_custom_ports(Node $entity) {
  $server_id = $entity->field_ua_sm_server->target_id;
  $port_manager = \Drupal::service('ua_sm_custom.port_manager');
  $used_ports = $port_manager->getUsedPorts($server_id);

  // Find which ports have not already been allocated to the instance.
  $required_ports = [];
  foreach ($port_manager->port_fields as $port_field) {
    $port_number = $entity->{$port_field}->value;
    if (!$port_number) {
      $required_ports[] = $port_field;
    }
    elseif (in_array($port_number, $used_ports)) {
      // @TODO: Handle case where assigned port already in use.
      return;
    }
  }

  $available_port_numbers = $port_manager->getAvailablePorts($server_id, count($required_ports));
  if ($available_port_numbers) {
    foreach ($required_ports as $required_port) {
      $entity->get($required_port)->setValue(array_pop($available_port_numbers));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ua_sm_custom_node_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'ua_sm_site' &&
    \Drupal::config('ua_sm_custom.settings')->get('ldap')['enabled']) {
    \Drupal::service('ua_ldap.ldap_site')
      ->addSite($entity->field_ua_sm_site_token->value);
    // todo: deal with failure - consider a queue.
    \Drupal::service('ua_ldap.ldap_site')
      ->syncUsers($entity->field_ua_sm_site_token->value);
    // todo: deal with failure - consider a queue.
  }
  elseif ($entity->bundle() == 'ua_sm_site_instance') {
    if (\Drupal::config('ua_sm_custom.settings')->get('jenkins')['enabled']) {
      ua_sm_custom_run_job_and_post_comment('provision', $entity);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ua_sm_custom_node_update(EntityInterface $entity) {
  if ($entity->bundle() == 'ua_sm_site' &&
    \Drupal::config('ua_sm_custom.settings')->get('ldap')['enabled']) {
    \Drupal::service('ua_ldap.ldap_site')->syncUsers($entity->field_ua_sm_site_token->value);
    // todo: deal with failure - consider a queue.
  }
  elseif ($entity->bundle() == 'ua_sm_site_instance') {
    if (\Drupal::config('ua_sm_custom.settings')->get('jenkins')['enabled']) {
      // Check if the published state of the site instance has changed.
      if ($entity->status->value !== $entity->original->status->value) {
        // If status has transitioned to published, run deploy,
        // otherwise run decommission.
        ua_sm_custom_run_job_and_post_comment(
          $entity->status->value ? 'deploy' : 'decommission',
          $entity
        );

        // Finally, set the state field to indicate this transition.
        $entity->field_ua_sm_state->value = $entity->status->value ? 'starting' : 'stopping';
        $entity->save();
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function ua_sm_custom_node_delete(EntityInterface $entity) {
  if ($entity->bundle() == 'ua_sm_site' &&
    \Drupal::config('ua_sm_custom.settings')->get('ldap')['enabled']) {
    \Drupal::service('ua_ldap.ldap_site')->removeSite($entity->field_ua_sm_site_token->value);
    // todo: deal with failure - consider a queue.
  }
  elseif ($entity->bundle() == 'ua_sm_site_instance' &&
    \Drupal::config('ua_sm_custom.settings')->get('jenkins')['enabled']) {
    ua_sm_custom_run_job_and_post_comment('destroy', $entity);
  }
}

/**
 * Implements hook_entity_prepare_form().
 */
function ua_sm_custom_entity_prepare_form(EntityInterface $entity) {
  if ($entity->bundle() == 'ua_sm_site') {
    $password_field = $entity->get('field_ua_sm_admin_password');
    $password = $password_field->getValue();
    if (!$password) {
      $password = base64_encode(Crypt::randomBytes(12));
      $password_field->setValue($password);
    }
  }
}
