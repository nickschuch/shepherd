<?php

/**
 * @file
 * Contains shp_database_provisioner.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\file\Entity\File;
use Drupal\shp_database_provisioner\Service\Provisioner;

/**
 * Implements hook_token_info().
 */
function shp_database_provisioner_token_info() {
  $info['types']['shepherd'] = [
    'name' => t('Shepherd'),
    'description' => t('Tokens related to shepherd.'),
  ];

  $info['tokens']['shepherd']['public-filename'] = [
    'name' => t('Public filename'),
    'description' => t('The public filename for the database to be provisioned.'),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function shp_database_provisioner_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  if ($type !== 'shepherd') {
    return [];
  }

  $replacements = [];

  foreach ($tokens as $name => $original) {
    switch ($name) {
      case 'public-filename':
        if (isset($data['project'])) {
          if (($file_id = $data['project']->field_shp_default_sql->target_id) && $file = File::load($file_id)) {
            $replacements[$original] = file_create_url($file->getFileUri());
          }
        }
        break;
    }
  }

  return $replacements;

}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function shp_database_provisioner_node_insert(EntityInterface $entity) {
  \Drupal::service('shp_database_provisioner.provisioner')->create($entity);
}

/**
 * Implements hook_shp_env_vars().
 */
function shp_database_provisioner_shp_env_vars(EntityInterface $entity) {
  $config = \Drupal::config('shp_database_provisioner.settings');
  return [
    Provisioner::ENV_MYSQL_HOSTNAME => $config->get('host'),
    Provisioner::ENV_MYSQL_PORT => $config->get('port'),
    Provisioner::ENV_MYSQL_DATABASE => 'env_' . $entity->id(),
    Provisioner::ENV_MYSQL_USERNAME => 'user_' . $entity->id(),
    // The following path is based on convention set in:
    // OpenShiftOrchestrationProvider::setupVolumes()
    // The 'default' deployment config secret is mounted at /etc/secret.
    'DATABASE_PASSWORD_FILE' => '/etc/secret/DATABASE_PASSWORD',
  ];
}
